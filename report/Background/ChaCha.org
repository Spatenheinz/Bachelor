ChaCha20 (From hereon just called ChaCha) is a stream cipher intended to be a fast and efficient standby cipher in case AES is compromised. Unlike block ciphers, such as AES, which works on a fixed-sized block of text, stream ciphers work on a per-byte level. This is usually done by combining the plaintext with a pseudorandom stream of digits using XOR. Since the objective of the cipher is to generate a random stream, one first needs a seed. The seed of ChaCha is 16 32 bit words, laid out as such:

\begin{figure}[!htb]
\centering
\includegraphics[width=3cm]{ChaChaSeed.png}
\caption{Seed of ChaCha20}
\label{fig:ChaChaSeed}
\end{figure}

As one can see, the layout of the seed is relatively simple and constitutes 4 parts:
#+BEGIN_EXPORT latex
\begin{itemize}
\itemsep 0em
\item A 4 word constant "expand 32-byte k", which is a classic case of a "nothing up my sleeve number".
\item A 256 bit key in little-endian order.
\item A word for the block counter (BC). This is sufficient for up to 256GB of plaintext.
\item A nonce which spans 3 words in little-endian.
\end{itemize}
#+END_EXPORT
It might seem counter-intuitive that the seed would include a word, which holds the current block number. However, the result of each iteration of ChaCha20 will result in 16 words generated for the stream. Since the rest of the seed will stay the same for the entire encryption, the increasing block counter will ensure that no two "blocks" should result in the same cipher, and essentially including the CTR mode of operation for block ciphers into the streaming cipher. The confusion part of the algorithm follows a simple add-rotate-XOR (ARX) structure. Every round is based on only simple arithmetic add, left rotations, and XOR operations. More specifically ChaCha20 consist of 20 round of which each consist of 4 quarter rounds will confuse 4 input words. Each quarter round looks as shown in Figure \ref{fig:ChaChaQR}
#+BEGIN_EXPORT latex
\begin{figure}[H]
\begin{minipage}{0.4\textwidth}
\begin{verbatim}
a += b; d ^= a; d <<<= 16;
c += d; b ^= c; b <<<= 12;
a += b; d ^= d; d <<<= 8;
c += d; b ^= c; b <<<= 7;
\end{verbatim}
\end{minipage}
\qquad
\begin{minipage}{0.4\textwidth}
\includegraphics[width=6cm]{ChaChaQR.png}
\end{minipage}
\caption{ChaCha20 Quarter Round}
\label{fig:ChaChaQR}
\end{figure}
#+END_EXPORT
ChaCha will perform 20 rounds consisting of 4 quarter rounds. For a quarter-round (QR) in an even-numbered round it will take a column of the seed as the input, an odd-numbered round will work on diagonals.
#+BEGIN_EXPORT latex
\begin{figure}[H]
\centering
\includegraphics[width=8cm]{diagonal.png}
\caption{ChaCha20 Rounds}
\label{fig:ChaChaRound}
\end{figure}
#+END_EXPORT

Lastly, when the 20 rounds have been computed, the initial seed and the modified version are index-wise added, giving a resulting block of 16 words of the stream, and this stream can then be XORed with the plaintext to get the plaintext cipher.
