SME has worked well as a tool for FPGA development. As shown in the previous section shown our implementations use few resources, and we have been able to gain some significant speedup that can compete with modern CPU alternatives without knowing how to actually write in a HDL. VHDL being one such hardware description language makes it an abstraction to physically connecting signals together.
Abstractions like this are usually created to make tasks easier for humans to write and read,
but since VHDL is a "first-level" abstraction from hardware, it can be difficult for untrained people to use. In many ways, it is similar to how C for CPU programming in that the user has a lot more control over every little aspect of the program at the cost of additional logic that the developer has to take into account.
In a similar mindset, SME is another level of abstraction from VHDL as C#, for instance, would be to C. Since SME is a framework for C#, it should be easier for a lot of software programmers to use.

\begin{figure}[H]
  \centering
  \includegraphics[scale=.6]{SMEabstraction}
  \caption{Levels of hardware abstraction, note that SME is the top level.}
\end{figure}

However, one thing to be aware of is that SME needs to compile to an HDL, and hence using SME must necessarily follow the same quirks, such as everything to have a fixed size. As shown, busses, etc., must be user specified. If the data flow of a program is complex, it will still be using SME, but it is comparatively not very much. Besides the dataflow, SME is definitely a lot easier to use than an HDL since one simply writes (a restricted subset) C# instead of defining specific types, etc.
For us, this was a big advantage since we have worked in C\# before but had no knowledge of working with VHDL.

In the process of developing this library, we have helped to find some bugs and identified parts of C# which we found missing from in SME's allowed subset, such as pass by reference, methods which take 0 parameters and work directly on fields. As these have now been taken into account in SME, it should be even more accessible to users in the future.

The major problems we encountered was using Vivado to synthesize our implementations.
If we wanted alternatives to Vivado we would need to switch to another FPGA than the Xilinx, however, investigating and determining what the advantages/disadvantages are of the different hardware/software would have taken a significant amount of time.
Given the scope of our project, we thought that time was better spend on implementation and testing. The usage of synthesis tools is, however, an inevitable part of FPGA programming and will likely require some time to familiarise with. This process can especially be tedious because of how long it takes to run it through the synthesis tool, ranging all from 20 minutes to multiple hours in extreme cases. An important thing to note is that even though it proved difficult to optimize SHA-2 and MD5, their naive implementations had a
reasonably large data throughput and uses few resources. This is important since it was fairly quick to get them implemented using SME.
If we look past the Vivado problems, we could have a prototype ready to use relatively quickly.
Of course, we had access to expert guidance, given that our supervisor helped create SME; however, SME has still proved to be a useful tool for FPGA programming and was quite manageable to familiarize oneself with.
