** SHA256
The implementation of SHA256 is very similar to that of the implementation of MD5,
since they both are hashing algorithms of the Merkle-Damg√•rd construction.
The significant difference is that SHA uses big-endian encodings while MD5 uses little-endian.

*** Naive
:PROPERTIES:
:UNNUMBERED: nil
:CUSTOM_ID: SHAnaive
:END:
The naive unoptimized SHA256 implementation upholds the same general structure in the code, including the padding and block fetching as the naive MD5.
The only difference is that the output digest is 256 bits, so an array of eight 32 bit unsigned integers,
and the format is changed from little-endian to big-endian in the padding and fetch block routines.

So all the busses are set the same and functions the same as in MD5. The exception of the array in the ~Digest~ output bus is extended to contain a 256-bit hash.

The SHA256 algorithm is located in the ~processBlock()~ routine.
The routine has the input block stored in the first 16 entries of the array ~blockD[]~.
Then these blocks get expanded and the hash calculated as described in Section \ref{SHAalg}.

The calculations for ch, maj, s1, and s0 could be their own functions, but they have been left as written out since they are simple and shouldn't significantly affect performance.
*** Optimizations
Since SHA256 is so similar to MD5, we can apply the same pipeline approaches as we did for MD5. One difference, however, is the block expansion, which likewise can be pipelined. Thus we should be able to create an even deeper pipeline for SHA256 without going completely overboard with the processes.
