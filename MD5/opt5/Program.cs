using SME;
using System;

namespace opt5
{
    class Program
    {
        static void Main(string[] args)
        {
            using (var sim = new Simulation()) {
                // Nice to be able to test buffer sizes
                // Console.WriteLine(str);
                var tester = new Tester();
                var formatter = new MessageFormat();
                formatter.Message = tester.Message;
                tester.axi_Message = formatter.axi_mes;
                var converter = new FormatConverter();
                converter.paddedBuffer = formatter.paddedBuffer;
                formatter.axi_pad = converter.axi_pad;
                var roundF1    = new RoundF1();
                roundF1.IN = converter.Out;
                converter.axi_out = roundF1.axi_in;
                var roundF2    = new RoundF2();
                roundF2.IN = roundF1.Out;
                roundF1.axi_out = roundF2.axi_in;
                var roundF3    = new RoundF3();
                roundF3.IN = roundF2.Out;
                roundF2.axi_out = roundF3.axi_in;
                var roundF4    = new RoundF4();
                roundF4.IN = roundF3.Out;
                roundF3.axi_out = roundF4.axi_in;
                var roundF5    = new RoundF5();
                roundF5.IN = roundF4.Out;
                roundF4.axi_out = roundF5.axi_in;
                var roundF6    = new RoundF6();
                roundF6.IN = roundF5.Out;
                roundF5.axi_out = roundF6.axi_in;
                var roundF7    = new RoundF7();
                roundF7.IN = roundF6.Out;
                roundF6.axi_out = roundF7.axi_in;
                var roundF8    = new RoundF8();
                roundF8.IN = roundF7.Out;
                roundF7.axi_out = roundF8.axi_in;
                var roundF9    = new RoundF9();
                roundF9.IN = roundF8.Out;
                roundF8.axi_out = roundF9.axi_in;
                var roundF10    = new RoundF10();
                roundF10.IN = roundF9.Out;
                roundF9.axi_out = roundF10.axi_in;
                var roundF11    = new RoundF11();
                roundF11.IN = roundF10.Out;
                roundF10.axi_out = roundF11.axi_in;
                var roundF12    = new RoundF12();
                roundF12.IN = roundF11.Out;
                roundF11.axi_out = roundF12.axi_in;
                var roundF13    = new RoundF13();
                roundF13.IN = roundF12.Out;
                roundF12.axi_out = roundF13.axi_in;
                var roundF14    = new RoundF14();
                roundF14.IN = roundF13.Out;
                roundF13.axi_out = roundF14.axi_in;
                var roundF15    = new RoundF15();
                roundF15.IN = roundF14.Out;
                roundF14.axi_out = roundF15.axi_in;
                var roundF16    = new RoundF16();
                roundF16.IN = roundF15.Out;
                roundF15.axi_out = roundF16.axi_in;
                var roundG1    = new RoundG1();
                roundG1.IN     = roundF16.Out;
                roundF16.axi_out = roundG1.axi_in;
                var roundG2    = new RoundG2();
                roundG2.IN     = roundG1.Out;
                roundG1.axi_out = roundG2.axi_in;
                var roundG3    = new RoundG3();
                roundG3.IN     = roundG2.Out;
                roundG2.axi_out = roundG3.axi_in;
                var roundG4    = new RoundG4();
                roundG4.IN     = roundG3.Out;
                roundG3.axi_out = roundG4.axi_in;
                var roundG5    = new RoundG5();
                roundG5.IN     = roundG4.Out;
                roundG4.axi_out = roundG5.axi_in;
                var roundG6    = new RoundG6();
                roundG6.IN     = roundG5.Out;
                roundG5.axi_out = roundG6.axi_in;
                var roundG7    = new RoundG7();
                roundG7.IN     = roundG6.Out;
                roundG6.axi_out = roundG7.axi_in;
                var roundG8    = new RoundG8();
                roundG8.IN     = roundG7.Out;
                roundG7.axi_out = roundG8.axi_in;
                var roundG9    = new RoundG9();
                roundG9.IN     = roundG8.Out;
                roundG8.axi_out = roundG9.axi_in;
                var roundG10    = new RoundG10();
                roundG10.IN     = roundG9.Out;
                roundG9.axi_out = roundG10.axi_in;
                var roundG11    = new RoundG11();
                roundG11.IN     = roundG10.Out;
                roundG10.axi_out = roundG11.axi_in;
                var roundG12    = new RoundG12();
                roundG12.IN     = roundG11.Out;
                roundG11.axi_out = roundG12.axi_in;
                var roundG13    = new RoundG13();
                roundG13.IN     = roundG12.Out;
                roundG12.axi_out = roundG13.axi_in;
                var roundG14    = new RoundG14();
                roundG14.IN     = roundG13.Out;
                roundG13.axi_out = roundG14.axi_in;
                var roundG15    = new RoundG15();
                roundG15.IN     = roundG14.Out;
                roundG14.axi_out = roundG15.axi_in;
                var roundG16    = new RoundG16();
                roundG16.IN     = roundG15.Out;
                roundG15.axi_out = roundG16.axi_in;
                var roundH1    = new RoundH1();
                roundH1.IN     = roundG16.Out;
                roundG16.axi_out = roundH1.axi_in;
                var roundH2    = new RoundH2();
                roundH2.IN     = roundH1.Out;
                roundH1.axi_out = roundH2.axi_in;
                var roundH3    = new RoundH3();
                roundH3.IN     = roundH2.Out;
                roundH2.axi_out = roundH3.axi_in;
                var roundH4    = new RoundH4();
                roundH4.IN     = roundH3.Out;
                roundH3.axi_out = roundH4.axi_in;
                var roundH5    = new RoundH5();
                roundH5.IN     = roundH4.Out;
                roundH4.axi_out = roundH5.axi_in;
                var roundH6    = new RoundH6();
                roundH6.IN     = roundH5.Out;
                roundH5.axi_out = roundH6.axi_in;
                var roundH7    = new RoundH7();
                roundH7.IN     = roundH6.Out;
                roundH6.axi_out = roundH7.axi_in;
                var roundH8    = new RoundH8();
                roundH8.IN     = roundH7.Out;
                roundH7.axi_out = roundH8.axi_in;
                var roundH9    = new RoundH9();
                roundH9.IN     = roundH8.Out;
                roundH8.axi_out = roundH9.axi_in;
                var roundH10    = new RoundH10();
                roundH10.IN     = roundH9.Out;
                roundH9.axi_out = roundH10.axi_in;
                var roundH11    = new RoundH11();
                roundH11.IN     = roundH10.Out;
                roundH10.axi_out = roundH11.axi_in;
                var roundH12    = new RoundH12();
                roundH12.IN     = roundH11.Out;
                roundH11.axi_out = roundH12.axi_in;
                var roundH13    = new RoundH13();
                roundH13.IN     = roundH12.Out;
                roundH12.axi_out = roundH13.axi_in;
                var roundH14    = new RoundH14();
                roundH14.IN     = roundH13.Out;
                roundH13.axi_out = roundH14.axi_in;
                var roundH15    = new RoundH15();
                roundH15.IN     = roundH14.Out;
                roundH14.axi_out = roundH15.axi_in;
                var roundH16    = new RoundH16();
                roundH16.IN     = roundH15.Out;
                roundH15.axi_out = roundH16.axi_in;
                var roundI1    = new RoundI1();
                roundI1.IN     = roundH16.Out;
                roundH16.axi_out = roundI1.axi_in;
                var roundI2    = new RoundI2();
                roundI2.IN     = roundI1.Out;
                roundI1.axi_out = roundI2.axi_in;
                var roundI3    = new RoundI3();
                roundI3.IN     = roundI2.Out;
                roundI2.axi_out = roundI3.axi_in;
                var roundI4    = new RoundI4();
                roundI4.IN     = roundI3.Out;
                roundI3.axi_out = roundI4.axi_in;
                var roundI5    = new RoundI5();
                roundI5.IN     = roundI4.Out;
                roundI4.axi_out = roundI5.axi_in;
                var roundI6    = new RoundI6();
                roundI6.IN     = roundI5.Out;
                roundI5.axi_out = roundI6.axi_in;
                var roundI7    = new RoundI7();
                roundI7.IN     = roundI6.Out;
                roundI6.axi_out = roundI7.axi_in;
                var roundI8    = new RoundI8();
                roundI8.IN     = roundI7.Out;
                roundI7.axi_out = roundI8.axi_in;
                var roundI9    = new RoundI9();
                roundI9.IN     = roundI8.Out;
                roundI8.axi_out = roundI9.axi_in;
                var roundI10    = new RoundI10();
                roundI10.IN     = roundI9.Out;
                roundI9.axi_out = roundI10.axi_in;
                var roundI11    = new RoundI11();
                roundI11.IN     = roundI10.Out;
                roundI10.axi_out = roundI11.axi_in;
                var roundI12    = new RoundI12();
                roundI12.IN     = roundI11.Out;
                roundI11.axi_out = roundI12.axi_in;
                var roundI13    = new RoundI13();
                roundI13.IN     = roundI12.Out;
                roundI12.axi_out = roundI13.axi_in;
                var roundI14    = new RoundI14();
                roundI14.IN     = roundI13.Out;
                roundI13.axi_out = roundI14.axi_in;
                var roundI15    = new RoundI15();
                roundI15.IN     = roundI14.Out;
                roundI14.axi_out = roundI15.axi_in;
                var roundI16    = new RoundI16();
                roundI16.IN     = roundI15.Out;
                roundI15.axi_out = roundI16.axi_in;
                var combinator = new Combiner();
                combinator.I = roundI16.Out;
                roundI16.axi_out = combinator.axi_in;
                tester.Digest = combinator.Final;
                combinator.axi_final = tester.axi_Digest;
                sim.AddTopLevelInputs(tester.Message, tester.axi_Digest)
                       .AddTopLevelOutputs(combinator.Final, tester.axi_Message)
                        .AddTicker(s => Console.WriteLine($"Ticks {Scope.Current.Clock.Ticks}"))
                        // .BuildCSVFile()
                        // .BuildGraph()
                        // .BuildVHDL()
                        .Run();
            }
        }
    }
}
